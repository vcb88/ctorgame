name: Continuous Integration

on:
  push:
    branches:
      - '**'  # Run on all branches
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
      - develop

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.1
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies and build shared
        run: |
          pnpm config set auto-install-peers true
          pnpm install -r --ignore-scripts
          pnpm --filter @ctor-game/shared build

      - name: Run linter and type check
        run: |
          pnpm --filter @ctor-game/client lint && pnpm --filter @ctor-game/client type-check
          pnpm --filter @ctor-game/server lint && pnpm --filter @ctor-game/server type-check

      - name: Run shared package tests
        run: pnpm --filter @ctor-game/shared test --reporter verbose

      - name: Run client unit tests
        run: |
          echo "Running unit tests..."
          pnpm --filter @ctor-game/client test:unit --reporter verbose
          echo "Running hook tests..."
          pnpm --filter @ctor-game/client test:hooks --reporter verbose
          echo "Running component tests..."
          pnpm --filter @ctor-game/client test:components --reporter verbose

      - name: Run server tests
        run: |
          echo "Running server unit tests..."
          pnpm --filter @ctor-game/server test:unit --reporter verbose
          echo "Running server integration tests..."
          pnpm --filter @ctor-game/server test:integration --reporter verbose
        env:
          REDIS_URL: redis://localhost:6379
          REDIS_PREFIX: ctorgame:test:
          NODE_ENV: test

      - name: Generate coverage reports
        run: |
          echo "Generating client coverage..."
          pnpm --filter @ctor-game/client test:coverage
          echo "Generating server coverage..."
          pnpm --filter @ctor-game/server test:coverage

      - name: Prepare and Start Dev Server
        run: |
          echo "Preparing dev environment..."
          cd client
          
          # First try to build the project
          echo "Building project..."
          pnpm build
          
          echo "Starting development server..."
          # Create logs directory
          mkdir -p logs
          
          # Start server in background with logging
          pnpm dev:ci > logs/vite.log 2>&1 &
          SERVER_PID=$!
          
          # Wait for server to start and be accessible
          echo "Waiting for server to be ready..."
          COUNTER=0
          MAX_ATTEMPTS=30
          
          until $(curl --output /dev/null --silent --head --fail http://localhost:5173/); do
            if [ $COUNTER -eq $MAX_ATTEMPTS ]; then
              echo "Server failed to start after $MAX_ATTEMPTS attempts"
              echo "Last few lines of server log:"
              tail -n 50 logs/vite.log
              kill $SERVER_PID
              exit 1
            fi
            
            echo "Attempt $((COUNTER + 1)) of $MAX_ATTEMPTS - waiting for server..."
            sleep 2
            COUNTER=$((COUNTER + 1))
          done
          
          echo "Server is up and responding!"
          # Keep the server running
          disown $SERVER_PID

      - name: Run Cypress Tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: client
          install: false
          start: |
            echo "Server should be running..."
            curl -v http://localhost:5173
          wait-on: 'http://localhost:5173'
          wait-on-timeout: 30
          browser: chrome
          record: false
        env:
          REDIS_URL: redis://localhost:6379
          REDIS_PREFIX: ctorgame:test:
          NODE_ENV: test
          CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-umbrella

  build-and-push:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    # Only run this job if PR is merged or push to main/develop
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'))
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push client image
      - name: Build and push client image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/client:latest
            ghcr.io/${{ github.repository }}/client:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push server image
      - name: Build and push server image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/server:latest
            ghcr.io/${{ github.repository }}/server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Notify about successful build and push
      - name: Notify about successful build
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,message,commit,author,action,workflow
          custom_payload: |
            {
              "attachments": [{
                "color": "good",
                "text": "Docker images built and pushed successfully! ðŸš€\nRepository: ${{ github.repository }}\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
