services:
  client:
    image: node:18-alpine
    working_dir: /app
    init: true
    networks:
      - app_network
    ports:
      - "5173:5173"
    healthcheck:
      test:
        - CMD-SHELL
        - |
          set -e
          if [ ! -f /usr/bin/wget ]; then
            apk add --no-cache wget
          fi
          wget --spider -q http://localhost:5173 || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - .:/app
      - pnpm_store:/root/.local/share/pnpm/store/v3
      - client_modules:/app/client/node_modules
      - shared_modules:/app/shared/node_modules
    env_file:
      - .env
    environment:
      - VITE_API_URL=http://localhost:3000
    command: |
      sh -c '
        cd /app
        apk add --no-cache wget
        mkdir -p /app/client/node_modules /app/shared/node_modules
        chown -R node:node /app/client/node_modules /app/shared/node_modules /app/client /app/shared
        npm install -g pnpm@latest
        su node -c "cd /app && 
          pnpm install --no-workspace-root &&
          cd /app/shared &&
          pnpm install &&
          pnpm build &&
          cd /app/client &&
          pnpm install &&
          pnpm dev"'
    depends_on:
      server:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  server:
    image: node:18-alpine
    working_dir: /app
    init: true
    networks:
      - app_network
    ports:
      - "3000:3000"
    healthcheck:
      test: 
        - CMD-SHELL
        - |
          set -e
          if [ ! -f /usr/bin/wget ]; then
            apk add --no-cache wget
          fi
          response=$(wget -qO- http://localhost:3000/health)
          echo "Health check response: $response"
          echo "$response" | grep -q '"status":"ok"' || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - .:/app
      - game_data:/data/games
      - pnpm_store:/root/.local/share/pnpm/store/v3
      - server_modules:/app/server/node_modules
      - shared_modules:/app/shared/node_modules
    env_file:
      - .env
    command: |
      sh -c '
        cd /app
        apk add --no-cache wget
        mkdir -p /app/server/node_modules /app/shared/node_modules
        chown -R node:node /app/server/node_modules /app/shared/node_modules /app/server /app/shared
        npm install -g pnpm@latest
        su node -c "cd /app &&
          pnpm install --no-workspace-root &&
          cd /app/shared &&
          pnpm install &&
          pnpm build &&
          cd /app/server &&
          pnpm install &&
          echo Running TypeScript check... &&
          pnpm run type-check &&
          echo Starting server in debug mode... &&
          mkdir -p dist &&
          ls -la dist/ || true &&
          DEBUG=* NODE_DEBUG=* pnpm dev"'
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    networks:
      - app_network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - redis_data:/data

  mongodb:
    image: mongo:6-jammy
    networks:
      - app_network
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
      - mongodb_data:/data/db

volumes:
  redis_data:
  mongodb_data:
  game_data:
  pnpm_store:
  client_modules:
  server_modules:
  shared_modules:

networks:
  app_network:
    driver: bridge
