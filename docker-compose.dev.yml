services:
  client:
    image: node:18-alpine
    working_dir: /app
    init: true
    networks:
      - app_network
    ports:
      - "5173:5173"
    healthcheck:
      test:
        - CMD-SHELL
        - |
          set -e
          if ! command -v curl &> /dev/null; then
            apk add --no-cache curl
          fi
          curl -sf http://localhost:5173 || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - .:/app
      - pnpm_store:/root/.local/share/pnpm/store/v3
      - client_modules:/app/client/node_modules
      - shared_modules:/app/shared/node_modules
    env_file:
      - .env
    environment:
      - VITE_API_URL=http://localhost:3000
      - PNPM_HOME=/app/.pnpm
      - NPM_CONFIG_UPDATE_NOTIFIER=false
      - PNPM_CONFIG_AUTO_INSTALL_PEERS=true
    command: |
      sh -c '
        cd /app
        apk add --no-cache wget curl

        # Set up directories and permissions
        mkdir -p /app/client/node_modules /app/shared/node_modules
        chown -R node:node /app/client/node_modules /app/shared/node_modules /app/client /app/shared

        # Create pnpm config to avoid prompts
        mkdir -p /app/.pnpm-store
        echo "auto-install-peers=true" > /app/.npmrc
        echo "strict-peer-dependencies=false" >> /app/.npmrc
        chown -R node:node /app/.pnpm-store /app/.npmrc

        # Install pnpm without update notifications
        NPM_CONFIG_UPDATE_NOTIFIER=false npm install -g pnpm@latest

        # Run as node user with all configs in place
        su node -c "cd /app && 
          pnpm install --no-workspace-root --force --registry=https://registry.npmjs.org/ &&
          cd /app/shared &&
          pnpm install --force --registry=https://registry.npmjs.org/ &&
          pnpm build &&
          cd /app/client &&
          pnpm install --force --registry=https://registry.npmjs.org/ &&
          pnpm dev --host 0.0.0.0"'
    depends_on:
      server:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  server:
    image: node:18-alpine
    working_dir: /app
    init: true
    networks:
      - app_network
    ports:
      - "3000:3000"
    healthcheck:
      test: 
        - CMD-SHELL
        - |
          set -e
          if ! command -v curl &> /dev/null; then
            apk add --no-cache curl
          fi
          curl -sf http://localhost:3000/test || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - .:/app
      - game_data:/data/games
      - pnpm_store:/app/.pnpm-store
      - server_modules:/app/server/node_modules
      - shared_modules:/app/shared/node_modules
    env_file:
      - .env
    command: |
      sh -c '
        cd /app

        # Install required packages
        apk add --no-cache wget curl

        # Create and set up directories
        mkdir -p /app/.pnpm-store
        mkdir -p /app/server/node_modules
        mkdir -p /app/shared/node_modules
        mkdir -p /app/client/node_modules
        
        # Set permissions
        chown -R node:node /app/.pnpm-store
        chown -R node:node /app/server
        chown -R node:node /app/shared
        chown -R node:node /app/client/node_modules
        
        # Install pnpm
        npm install -g pnpm@latest
        
        # Copy and prepare start script
        cp /app/server/start-server.sh /tmp/start-server.sh
        chmod +x /tmp/start-server.sh
        chown node:node /tmp/start-server.sh
        
        # Run as node user
        exec su node -c "/tmp/start-server.sh"'
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    networks:
      - app_network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - redis_data:/data

  mongodb:
    image: mongo:6-jammy
    networks:
      - app_network
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
      - mongodb_data:/data/db

volumes:
  redis_data:
  mongodb_data:
  game_data:
  pnpm_store:
  client_modules:
  server_modules:
  shared_modules:

networks:
  app_network:
    driver: bridge
