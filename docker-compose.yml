
services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      server:
        condition: service_healthy
      client:
        condition: service_started

  client:
    image: ${CLIENT_TAG:-ctorgame-client:latest}
    build:
      context: .
      dockerfile: Dockerfile.client
    env_file:
      - .env
    volumes:
      - ./nginx.client.conf:/etc/nginx/conf.d/default.conf:ro
      - client_dist:/usr/share/nginx/html

  server:
    image: ${SERVER_TAG:-ctorgame-server:latest}
    build:
      context: .
      dockerfile: server/Dockerfile
      target: builder  # Используем этап сборки
    ports:
      - "3000:3000"
    env_file:
      - .env
    volumes:
      - game_data:/data/games
      - ./server/src:/app/server/src  # Монтируем исходники для разработки
      - ./shared/src:/app/shared/src  # Монтируем shared исходники
    depends_on:
      redis:
        condition: service_started
      mongodb:
        condition: service_started
    command: >
      sh -c "cd /app/shared && 
             pnpm install --force && 
             npm install -g typescript && 
             pnpm build && 
             cd /app/server && 
             pnpm install --force && 
             rm -rf dist && 
             pnpm build && 
             ls -la dist && 
             node dist/index.js"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/test || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  mongodb:
    image: mongo:6-jammy
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

volumes:
  redis_data:
  mongodb_data:
  client_dist:
  game_data:
