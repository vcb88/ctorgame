
services:

  client:
    image: ${CLIENT_TAG:-ctorgame-client:latest}
    build:
      context: .
      dockerfile: Dockerfile.client
    ports:
      - "5173:5173"
    networks:
      - ctorgame_network
    env_file:
      - .env
    command: ["pnpm", "dev", "--host"]

  server:
    image: ${SERVER_TAG:-ctorgame-server:latest}
    build:
      context: .
      dockerfile: server/Dockerfile
      target: builder  # Используем этап сборки
    ports:
      - "3000:3000"
    networks:
      - ctorgame_network
    env_file:
      - .env
    volumes:
      - game_data:/data/games
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    command: >
      sh -c "node dist/index.js"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - ctorgame_network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  mongodb:
    image: mongo:6-jammy
    ports:
      - "27017:27017"
    networks:
      - ctorgame_network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-adminpassword}
    command: ["mongod", "--bind_ip_all", "--logpath", "/proc/1/fd/1", "--logappend"]
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  redis_data:
  mongodb_data:
  client_dist:
  game_data:

networks:
  ctorgame_network:
    driver: bridge